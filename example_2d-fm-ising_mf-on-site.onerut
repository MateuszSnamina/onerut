#!/usr/local/bin/onerut

# The hamiltonian:
# H = sum_{<ij>||a} J_a \vec S_i \cdot \vec S_j
#     + {the same for direction b}
# 
# Here we consider FM case (with J_a, J_b < 0).

########################################
# Define spin dublet Hilbert space     #
########################################
DUBLET_DOMAIN := spin_domain(2)

########################################
# Define handy references              #
# for standard vibronic operators      #
########################################
new const Sz := Sz(DUBLET_DOMAIN)

########################################
# Model -- params                     ##
########################################
new const J_a := -1.0
new const J_b := -1.0
bind_to_env(temperature, 0.0)

########################################
# Convergence -- params               ##
########################################
mean_Sz := parameter(0.5)

########################################
# MF Hamiltonian                      ##
########################################
new const B := [2 * J_a + 2 * J_b] * mean_Sz
new const H := B * Sz
eig := eigd(H)

########################################
# Convergence param expressions       ##
########################################

mean_Sz -> thermal_mean(Sz, eig, temperature)
mean_Sz :: 1e-5

################################################
# specific heat in finite temperature         ##
################################################

mean_energy := thermal_mean(H, eig, temperature)
mean_energy2 := thermal_mean(H * H, eig, temperature)
var_energy := mean_energy2 - mean_energy^2
specific_heat_numerical := var_energy / temperature^2

########################################
# Print requests                      ##
########################################

VALUE(mean_Sz)
VALUE(specific_heat_numerical)
